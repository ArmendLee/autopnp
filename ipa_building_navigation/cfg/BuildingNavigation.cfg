#!/usr/bin/env python
PACKAGE = "ipa_building_navigation"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

tsp_enum = gen.enum([ gen.const("NearestNeighbor", int_t, 1, "Use the nearest neighbor TSP algorithm."),
                       gen.const("GeneticSolver", int_t, 2, "Use the genetic TSP algorithm."),
                       gen.const("ConcordeSolver", int_t, 3, "Use the Concorde TSP algorithm.")],
                     "TSP solver")
gen.add("tsp_solver", int_t, 0, "TSP solver", 3, 1, 3, edit_method=tsp_enum)

trolley_placement_method_enum = gen.enum([	gen.const("DragTrolleyWhenNecessary", int_t, 1, "Drag the trolley if it is too far away from next room."),
											gen.const("PrecomputeRoomGroupsAndCorrespondingTrolleyPosition", int_t, 2, "Put rooms together in groups and calculate a corresponding trolley positions.")],
											"Trolley placement method")
gen.add("planning_method", int_t, 0, "Trolley placement method", 2, 1, 2, edit_method=trolley_placement_method_enum)

gen.add("max_clique_path_length", double_t, 0, "Max A* path length between two rooms that are assigned to the same clique, in [m]", 12.0, 0.0)

gen.add("map_downsampling_factor", double_t, 0, "The map may be downsampled during computations (e.g. of A* path lengths) in order to speed up the algorithm, if set to 1 the map will have original size, if set to 0 the algorithm won't work", 0.25, 0.00001, 1.0)

gen.add("check_accessibility_of_rooms", bool_t, 0, "Tells the sequence planner if it should check the given room centers for accessibility from the starting position", True)

gen.add("return_sequence_map", bool_t, 0, "Tells the server if the map with the sequence drawn in should be returned", False)

gen.add("display_map", bool_t, 0, "Show the resulting map with paths (only if return_sequence_map=true)", False)

exit(gen.generate(PACKAGE, "room_sequence_planning_action_server", "BuildingNavigation"))
