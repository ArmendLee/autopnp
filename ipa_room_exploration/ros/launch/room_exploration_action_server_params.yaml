# this variable selects the algorithm for room exploration
# 1 = grid point explorator
# 2 = boustrophedon explorator
# 3 = neural network explorator
# int
room_exploration_algorithm: 1

# this variable sets if the path should be generated such that the robot footprint has to cover everything instead of the field of view
plan_for_footprint: false

# minimal area of not seen sections that they are revisited after the first go trough the room
# double
# [m^2]
left_sections_min_area: 0.01

# min distance between the robot and the published navigation goal before the next goal in the path gets published
# double
goal_eps: 0.35

# line length of one cell in the grid, when using the grid point exploration method
# [pixel]
grid_line_length: 10

# distance between two points when generating the path with the boustrophedon explorator
# [pixel]
path_eps: 10

# parameters specific for the neural network explorator, see "A Neural Network Approach to Complete Coverage Path Planning" from Simon X. Yang and Chaomin Luo
# step size for integrating the state dynamics
step_size: 0.008
# decaying parameter that pulls the activity of a neuron closer to zero, larger value means faster decreasing
A: 17
# increasing parameter that tries to increase the activity of a neuron when it's not too big already, higher value means a higher desired value and a faster increasing at the beginning
B: 5
# decreasing parameter when the neuron is labeled as obstacle, higher value means faster decreasing
D: 7
# external input parameter of one neuron that is used in the dynamics corresponding to if it is an obstacle or uncleaned/cleaned, E>>B
E: 80
# parameter to set the importance of the states of neighboring neurons to the dynamics, higher value means higher influence
mu: 1.03
# parameter to set the importance of the traveleing direction from the previous step and the next step, a higher value means that the robot should turn less
delta_theta_weight: 0.15
