#!/usr/bin/env python
PACKAGE = "ipa_room_exploration"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Method to plan a path trough the room
method_enum = gen.enum([ gen.const("GridPointExplorator", int_t, 1, "Use the grid point exploration algorithm."),
			 gen.const("BoustrophedonExplorator", int_t, 2, "Use the boustrophedon exploration algorithm."),
			 gen.const("NeuralNetworkExplorator", int_t, 3, "Use the neural network exploration algorithm.")],
                     "Exploration algorithm")
gen.add("room_exploration_algorithm", int_t, 0, "Exploration method", 1, 1, 3, edit_method=method_enum)

# min area before previously not seen areas have to be revisited, [m^2]
gen.add("left_sections_min_area", double_t, 0, "Minimal size of left sections to revisit them after one go [m^2].", 0.01, 1e-7);

# Boolean to set if the path should allow the field of view or the robot footprint to cover the whole area
gen.add("plan_for_footprint", bool_t, 0, "Use the robot footprint to cover free space.", False);

# double that shows how close the robot can get to a published navigation goal before another gets published
gen.add("goal_eps", double_t, 0, "Distance from robot to published goal to publish the next goal in the path.", 0.35, 0.0);

# Grid point Explorator
gen.add("grid_line_length", int_t, 0, "Grid line length for grid point explorator.", 9, 1);

# Boustrophedon Explorator
gen.add("path_eps", int_t, 0, "Minimal distance between two points on the generated path [pixel].", 3, 0);

# Neural network explorator, see room_exploration_action_server.params.yaml for further details
gen.add("step_size", double_t, 0, "Step size for integrating the state dynamics of the neural network.", 0.008, 0.0001, 1.0);
gen.add("A", int_t, 0, "Decaying parameter that pulls the activity of a neuron closer to zero, larger value means faster decreasing.", 17, 1);
gen.add("B", int_t, 0, "Increasing parameter that tries to increase the activity of a neuron, higher value means a higher desired value and a faster increasing at the beginning.", 5, 1);
gen.add("D", int_t, 0, "Decreasing parameter when the neuron is labeled as obstacle, higher value means faster decreasing.", 7, 1);
gen.add("E", int_t, 0, "External input parameter of one neuron that is used in the dynamics corresponding to if it is an obstacle or uncleaned/cleaned, E>>B.", 80, 1);
gen.add("mu", double_t, 0, "Parameter to set the importance of the states of neighboring neurons to the dynamics, higher value means higher influence.", 1.03, 0.001);
gen.add("delta_theta_weight", double_t, 0, "Parameter to set the importance of the traveleing direction from the previous step and the next step, a higher value means that the robot should turn less.", 0.15, 0.0);

exit(gen.generate(PACKAGE, "ipa_room_exploration_action_server", "RoomExploration"))
