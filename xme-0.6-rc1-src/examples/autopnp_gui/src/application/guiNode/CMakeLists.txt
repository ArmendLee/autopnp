#
# Copyright (c) 2011-2013, fortiss GmbH.
# Licensed under the Apache License, Version 2.0.
# 
# Use, modification and distribution are subject to the terms specified
# in the accompanying license file LICENSE.txt located at the root directory
# of this software distribution. A copy is available at
# http://chromosome.fortiss.org/.
#
# This file is part of CHROMOSOME.
#
# $Id$
#         This file has been generated by the CHROMOSOME Modeling Tool (XMT)
#         (fortiss GmbH).

cmake_minimum_required (VERSION 2.6)

project (guiNode)

# Main project settings
include ("../../../../CMakeCommon.txt")

# Add project specific include directories
xme_include_directory ("../..")

# PROTECTED REGION ID(APPLICATION_GUINODE_CMAKELISTS_TXT_INCLUDES) ENABLED START 
#FIND_PACKAGE(Boost)
# ROS
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)
rosbuild_init()

include_directories(
	${CMAKE_CURRENT_SOURCE_DIR}/../../../build/exampleGui
#	/usr/include/c++/4.6.3
#	/usr/include/c++/4.6.3/x86_64-linux-gnu
#	${Boost_INCLUDE_DIR}
)
# PROTECTED REGION END

# Add component definitions
include ("CMakeXmeComponents.txt")

# Add udp waypoint directory
xme_add_subdirectory ("${XME_ROOT}/xme/wp/udp")

# Set up sources and headers
set(
    SOURCES
    guiNode.c
    ../../xme/core/topicUtil.c
    
    # PROTECTED REGION ID(APPLICATION_GUINODE_CMAKELISTS_TXT_SOURCES) ENABLED START 
	mainwindow.cpp
	ros_code.cpp
	headerImplementation.cpp
    # PROTECTED REGION END
)

set(
    HEADERS
    ../../chromosomeGui/topic/dictionary.h
    ../../xme/core/topicUtil.h
    ../../chromosomeGui/topic/dictionaryData.h
    
    # PROTECTED REGION ID(APPLICATION_GUINODE_CMAKELISTS_TXT_HEADERS) ENABLED START 
	mainwindow.h
	wrapperHeader.h
	headerFile.h
	ros_code.h
    # PROTECTED REGION END
)

# Define target
xme_add_executable(
    "guiNode"
    ${SOURCES}
    ${HEADERS}
    # PROTECTED REGION ID(APPLICATION_GUINODE_CMAKELISTS_TXT_EXECUTABLE) ENABLED START 
	${RC_SRCS}
	${UI_HDRS}
    # PROTECTED REGION END
)

# PROTECTED REGION ID(APPLICATION_GUINODE_CMAKELISTS_TXT_ADDITIONAL) ENABLED START 
target_link_libraries("guiNode" ${${PROJECT_NAME}_LIBRARIES})

set(
	UIS
	mainwindow.ui
)

set(
	RCS
)

### Qt configuration ###
# Qt modules (QtCore and QtGui are enabled by default)
set(QT_USE_QTMAIN TRUE)

find_package(Qt4 REQUIRED)

# Add some useful macros and variables
# (QT_USE_FILE is a variable defined by find_package(Qt4) that contains a path to CMake script)
include(${QT_USE_FILE})

# Run rcc on all files from RCS
qt4_add_resources(RC_SRCS ${RCS})

# Run uic on .ui files
qt4_wrap_ui(UI_HDRS ${UIS})

set_target_properties("guiNode" PROPERTIES AUTOMOC TRUE)

target_link_libraries(
	"guiNode"
	${QT_LIBRARIES}
#	${Boost_LIBRARIES}
)
# PROTECTED REGION END

# Build XME components
xme_link_components(
    "guiNode"
    chromosomeGui_adv_guiComponent
    xme_core_broker
    xme_core_dataHandler
    xme_core_executionManager
    xme_core_node
    xme_wp_marshal_demarshaler
    xme_wp_marshal_demarshaler-gen
    xme_wp_marshal_marshaler
    xme_wp_marshal_marshaler-gen
    xme_wp_udp_udpReceive
    xme_wp_udp_udpSend
)

# Build documentation
xme_build_documentation(
    "guiNode"
    TARGET "guiNode_doc"
    OUTPUT_NAME "guiNode.chm"
    INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}
    #AUTO
    CLEAN
    FILES ${SOURCES} ${HEADERS}
)
