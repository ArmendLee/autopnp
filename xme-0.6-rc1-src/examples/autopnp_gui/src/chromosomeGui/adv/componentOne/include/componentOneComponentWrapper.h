/*
 * Copyright (c) 2011-2013, fortiss GmbH.
 * Licensed under the Apache License, Version 2.0.
 *
 * Use, modification and distribution are subject to the terms specified
 * in the accompanying license file LICENSE.txt located at the root directory
 * of this software distribution. A copy is available at
 * http://chromosome.fortiss.org/.
 *
 * This file is part of CHROMOSOME.
 *
 * $Id$
 */

/**
 * \file
 *         Component wrapper - implements interface of a component
 *              to the data handler
 *
 * \author
 *         This file has been generated by the CHROMOSOME Modeling Tool (XMT)
 *         (fortiss GmbH).
 */

#ifndef CHROMOSOMEGUI_ADV_COMPONENTONE_COMPONENTONECOMPONENTWRAPPER_H
#define CHROMOSOMEGUI_ADV_COMPONENTONE_COMPONENTONECOMPONENTWRAPPER_H

/******************************************************************************/
/***   Includes                                                             ***/
/******************************************************************************/
#include "xme/core/executionManager/include/executionManagerDataStructures.h"

// PROTECTED REGION ID(CHROMOSOMEGUI_ADV_COMPONENTONE_COMPONENTONECOMPONENTWRAPPER_H_INCLUDES) ENABLED START

#include "chromosomeGui/topic/dictionaryData.h"

// PROTECTED REGION END

/******************************************************************************/
/***   Type definitions                                                     ***/
/******************************************************************************/
XME_EXTERN_C_BEGIN

/**
 * \enum   chromosomeGui_adv_componentOne_componentOneComponentWrapper_internalPortId_t
 *
 * \brief  Defines internal port ids of component 'componentOne'.
 *
 * \details These can be used when calling the chromosomeGui_adv_componentOne_componentOneComponentWrapper_receivePort function.
 *
 * \see    chromosomeGui_adv_componentOne_componentOneComponentWrapper_receivePort
 */
typedef enum
{
    CHROMOSOMEGUI_ADV_COMPONENTONE_COMPONENTONECOMPONENTWRAPPER_PORT_BUTTONPUSHED = 0, ///< Port 'buttonPushed'
    CHROMOSOMEGUI_ADV_COMPONENTONE_COMPONENTONECOMPONENTWRAPPER_PORT_SENDTEXT = 1 ///< Port 'sendText'
} chromosomeGui_adv_componentOne_componentOneComponentWrapper_internalPortId_t;

/******************************************************************************/
/***   Prototypes                                                           ***/
/******************************************************************************/
/**
 * \brief  Associate an internal port number with the corresponding port handle.
 *         For the ids of the individual ports, see the definition of chromosomeGui_adv_componentOne_componentOneComponentWrapper_internalPortId_t.
 *
 * \param  dataPacketId Port handle from the dataHandler.
 * \param  componentInternalPortId Component internal port number of the above port.
 * 
 * \retval XME_STATUS_SUCCESS if no problems occurred.
 * \retval XME_STATUS_INVALID_PARAMETER if componentInternalPortId is unknown.
 */
xme_status_t
chromosomeGui_adv_componentOne_componentOneComponentWrapper_receivePort
(
    xme_core_dataManager_dataPacketId_t dataPacketId,
    chromosomeGui_adv_componentOne_componentOneComponentWrapper_internalPortId_t componentInternalPortId
);

/**
 * \brief  This function is called by the function wrapper after the step
 *         function has been called. It signals to the middleware that all
 *         input ports have been read.
 */
void
chromosomeGui_adv_componentOne_componentOneComponentWrapper_completeReadOperations(void);

/**
 * \brief  This function is called by the function wrapper after the step
 *         function has been called. It signals to the middleware that all
 *         write operations on ports that actually have been written to 
 *         in the step function (via the functions in this component wrapper)
 *         are now completed.
 */
void
chromosomeGui_adv_componentOne_componentOneComponentWrapper_completeWriteOperations(void);

/**
 * \brief  Read data from port buttonPushed.
 *
 * \param  data User provided storage, to which the data is copied.
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
chromosomeGui_adv_componentOne_componentOneComponentWrapper_readPortButtonPushed
(
    chromosomeGui_topic_ButtonSignal_t* data
);

/**
 * \brief  Write data to port sendText.
 *
 * \param  data User provided storage, from which the data is copied.
 *              When NULL no data will be written to the port (this
 *              is also treated as  success).
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
chromosomeGui_adv_componentOne_componentOneComponentWrapper_writePortSendText
(
    chromosomeGui_topic_WriteText_t* data
);


XME_EXTERN_C_END

#endif // #ifndef CHROMOSOMEGUI_ADV_COMPONENTONE_COMPONENTONECOMPONENTWRAPPER_H
