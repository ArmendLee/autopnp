/*
 * Copyright (c) 2011-2013, fortiss GmbH.
 * Licensed under the Apache License, Version 2.0.
 *
 * Use, modification and distribution are subject to the terms specified
 * in the accompanying license file LICENSE.txt located at the root directory
 * of this software distribution. A copy is available at
 * http://chromosome.fortiss.org/.
 *
 * This file is part of CHROMOSOME.
 *
 * $Id: wrapperTestComponentWrapper.h 4948 2013-09-04 08:25:51Z ruiz $
 */

/**
 * \file
 *         Component wrapper - implements interface of a component
 *              to the data handler
 *
 * \author
 *         This file has been generated by the CHROMOSOME Modeling Tool (XMT)
 *         (fortiss GmbH).
 */

#ifndef XME_ADV_WRAPPERTEST_WRAPPERTESTCOMPONENTWRAPPER_H
#define XME_ADV_WRAPPERTEST_WRAPPERTESTCOMPONENTWRAPPER_H

/******************************************************************************/
/***   Includes                                                             ***/
/******************************************************************************/
#include "xme/core/executionManager/include/executionManagerDataStructures.h"

// PROTECTED REGION ID(XME_ADV_WRAPPERTEST_WRAPPERTESTCOMPONENTWRAPPER_H_INCLUDES) ENABLED START

#include "xme/core/topicData.h"

// PROTECTED REGION END

/******************************************************************************/
/***   Type definitions                                                     ***/
/******************************************************************************/
XME_EXTERN_C_BEGIN

/**
 * \enum   xme_adv_wrapperTest_wrapperTestComponentWrapper_internalPortId_t
 *
 * \brief  Defines internal port ids of component 'wrapperTest'.
 *
 * \details These can be used when calling the xme_adv_wrapperTest_wrapperTestComponentWrapper_receivePort function.
 *
 * \see    xme_adv_wrapperTest_wrapperTestComponentWrapper_receivePort
 */
typedef enum
{
    XME_ADV_WRAPPERTEST_WRAPPERTESTCOMPONENTWRAPPER_PORT_IN0 = 0, ///< Port 'in0'
    XME_ADV_WRAPPERTEST_WRAPPERTESTCOMPONENTWRAPPER_PORT_IN1 = 1, ///< Port 'in1'
    XME_ADV_WRAPPERTEST_WRAPPERTESTCOMPONENTWRAPPER_PORT_OUT0 = 2, ///< Port 'out0'
    XME_ADV_WRAPPERTEST_WRAPPERTESTCOMPONENTWRAPPER_PORT_OUT1 = 3 ///< Port 'out1'
} xme_adv_wrapperTest_wrapperTestComponentWrapper_internalPortId_t;

/******************************************************************************/
/***   Prototypes                                                           ***/
/******************************************************************************/
/**
 * \brief  Associate an internal port number with the corresponding port handle.
 *         For the ids of the individual ports, see the definition of xme_adv_wrapperTest_wrapperTestComponentWrapper_internalPortId_t.
 *
 * \param  dataPacketId Port handle from the dataHandler.
 * \param  componentInternalPortId Component internal port number of the above port.
 * 
 * \retval XME_STATUS_SUCCESS if no problems occurred.
 * \retval XME_STATUS_INVALID_PARAMETER if componentInternalPortId is unknown.
 */
xme_status_t
xme_adv_wrapperTest_wrapperTestComponentWrapper_receivePort
(
    xme_core_dataManager_dataPacketId_t dataPacketId,
    xme_adv_wrapperTest_wrapperTestComponentWrapper_internalPortId_t componentInternalPortId
);

/**
 * \brief  This function is called by the function wrapper after the step
 *         function has been called. It signals to the middleware that all
 *         input ports have been read.
 */
void
xme_adv_wrapperTest_wrapperTestComponentWrapper_completeReadOperations(void);

/**
 * \brief  This function is called by the function wrapper after the step
 *         function has been called. It signals to the middleware that all
 *         write operations on ports that actually have been written to 
 *         in the step function (via the functions in this component wrapper)
 *         are now completed.
 */
void
xme_adv_wrapperTest_wrapperTestComponentWrapper_completeWriteOperations(void);

/**
 * \brief  Read data from port in0.
 *
 * \param  data User provided storage, to which the data is copied.
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
xme_adv_wrapperTest_wrapperTestComponentWrapper_readPortIn0
(
    xme_core_topic_login_loginRequest_t* data
);

/**
 * \brief  Read data from port in1.
 *
 * \param  data User provided storage, to which the data is copied.
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
xme_adv_wrapperTest_wrapperTestComponentWrapper_readPortIn1
(
    xme_core_topic_login_pnpLoginRequest_t* data
);

/**
 * \brief  Write data to port out0.
 *
 * \param  data User provided storage, from which the data is copied.
 *              When NULL no data will be written to the port (this
 *              is also treated as  success).
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
xme_adv_wrapperTest_wrapperTestComponentWrapper_writePortOut0
(
    xme_core_topic_login_loginResponse_t* data
);

/**
 * \brief  Write data to port out1.
 *
 * \param  data User provided storage, from which the data is copied.
 *              When NULL no data will be written to the port (this
 *              is also treated as  success).
 *
 * \retval XME_STATUS_SUCCESS if operation was successful.
 */
xme_status_t
xme_adv_wrapperTest_wrapperTestComponentWrapper_writePortOut1
(
    xme_core_topic_login_pnpLoginResponse_t* data
);


XME_EXTERN_C_END

#endif // #ifndef XME_ADV_WRAPPERTEST_WRAPPERTESTCOMPONENTWRAPPER_H
